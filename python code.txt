#import libraries
import cv2
import math
import cvzone
from ultralytics import YOLO


# Load YOLO model with custom weights
yolo_model = YOLO("Weights/best.pt")

# Define class names
class_labels = [
    "ALL_MOTOR_VEHICLE_PROHIBITED",
    "AXLE_LOAD_LIMIT",
    "BARRIER_AHEAD",
    "BULLOCK_AND_HANDCART_PROHIBITED",
    "BULLOCK_PROHIBITED",
    "CATTLE",
    "COMPULSARY_AHEAD",
    "COMPULSARY_AHEAD_OR_TURN_LEFT",
    "COMPULSARY_AHEAD_OR_TURN_RIGHT",
    "COMPULSARY_CYCLE_TRACK",
    "COMPULSARY_KEEP_LEFT",
    "COMPULSARY_KEEP_RIGHT",
    "COMPULSARY_MINIMUM_SPEED",
    "COMPULSARY_SOUND_HORN",
    "COMPULSARY_TURN_LEFT",
    "COMPULSARY_TURN_LEFT_AHEAD",
    "COMPULSARY_TURN_RIGHT",
    "COMPULSARY_TURN_RIGHT_AHEAD",
    "CROSS_ROAD",
    "CYCLE_CROSSING",
    "CYCLE_PROHIBITED",
    "DANGEROUS_DIP",
    "DIRECTION",
    "FALLING_ROCKS",
    "FERRY",
    "GAP_IN_MEDIAN",
    "GIVE_WAY",
    "GUARDED_LEVEL_CROSSING",
    "HANDCART_PROHIBITED",
    "HEIGHT_LIMIT",
    "HORN_PROHIBITED",
    "HUMP_OR_ROUGH_ROAD",
    "LEFT_HAIR_PIN_BEND",
    "LEFT_HAND_CURVE",
    "LEFT_REVERSE_BEND",
    "LEFT_TURN_PROHIBITED",
    "LENGTH_LIMIT",
    "LOAD_LIMIT",
    "LOOSE_GRAVEL",
    "MEN_AT_WORK",
    "NARROW_BRIDGE",
    "NARROW_ROAD_AHEAD",
    "NO_ENTRY",
    "NO_PARKING",
    "NO_STOPPING_OR_STANDING",
    "null",
    "OVERTAKING_PROHIBITED",
    "PASS_EITHER_SIDE",
    "PEDESTRIAN_CROSSING",
    "PEDESTRIAN_PROHIBITED",
    "PRIORITY_FOR_ONCOMING_VEHICLES",
    "QUAY_SIDE_OR_RIVER_BANK",
    "RESTRICTION_ENDS",
    "RIGHT_HAIR_PIN_BEND",
    "RIGHT_HAND_CURVE",
    "RIGHT_REVERSE_BEND",
    "RIGHT_TURN_PROHIBITED",
    "ROAD_WIDENS_AHEAD",
    "ROUNDABOUT",
    "SCHOOL_AHEAD",
    "SIDE_ROAD_LEFT",
    "SIDE_ROAD_RIGHT",
    "SLIPPERY_ROAD",
    "SPEED_LIMIT_15",
    "SPEED_LIMIT_20",
    "SPEED_LIMIT_30",
    "SPEED_LIMIT_40",
    "SPEED_LIMIT_5",
    "SPEED_LIMIT_50",
    "SPEED_LIMIT_60",
    "SPEED_LIMIT_70",
    "SPEED_LIMIT_80",
    "STAGGERED_INTERSECTION",
    "STEEP_ASCENT",
    "STEEP_DESCENT",
    "STOP",
    "STRAIGHT_PROHIBITED",
    "T_INTERSECTION",
    "TONGA_PROHIBITED",
    "TRAFFIC_SIGNAL",
    "TRUCK_PROHIBITED",
    "TURN_RIGHT",
    "U_TURN_PROHIBITED",
    "UNGUARDED_LEVEL_CROSSING",
    "WIDTH_LIMIT",
    "Y_INTERSECTION"
]


# Load the image
image_path = "Media/img_105.jpg"
img = cv2.imread(image_path)

# Perform object detection
results = yolo_model(img)

# Loop through the detections and draw bounding boxes
for r in results:
    boxes = r.boxes
    for box in boxes:
        x1, y1, x2, y2 = box.xyxy[0]
        x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

        w, h = x2 - x1, y2 - y1
        
        conf = math.ceil((box.conf[0] * 100)) / 100
        cls = int(box.cls[0])

        if conf > 0.3:
            cvzone.cornerRect(img, (x1, y1, w, h), t=2)
            cvzone.putTextRect(img, f'{class_labels[cls]} {conf}', (x1, y1 - 10), scale=0.8, thickness=1, colorR=(255, 0, 0))

# Display the image with detections
cv2.imshow("Image", img)

# Close window when 'q' button is pressed
while True:
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
cv2.waitKey(1) 